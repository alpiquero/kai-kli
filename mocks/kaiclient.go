// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/konstellation-io/kli/api/kai/product"
	version "github.com/konstellation-io/kli/api/kai/version"
)

// MockKaiInterface is a mock of KaiInterface interface.
type MockKaiInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKaiInterfaceMockRecorder
}

// MockKaiInterfaceMockRecorder is the mock recorder for MockKaiInterface.
type MockKaiInterfaceMockRecorder struct {
	mock *MockKaiInterface
}

// NewMockKaiInterface creates a new mock instance.
func NewMockKaiInterface(ctrl *gomock.Controller) *MockKaiInterface {
	mock := &MockKaiInterface{ctrl: ctrl}
	mock.recorder = &MockKaiInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKaiInterface) EXPECT() *MockKaiInterfaceMockRecorder {
	return m.recorder
}

// Product mocks base method.
func (m *MockKaiInterface) Product() product.ProductInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Product")
	ret0, _ := ret[0].(product.ProductInterface)
	return ret0
}

// Product indicates an expected call of Product.
func (mr *MockKaiInterfaceMockRecorder) Product() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Product", reflect.TypeOf((*MockKaiInterface)(nil).Product))
}

// Version mocks base method.
func (m *MockKaiInterface) Version() version.VersionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(version.VersionInterface)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockKaiInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKaiInterface)(nil).Version))
}
