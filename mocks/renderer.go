// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/konstellation-io/kli/api/kre/config"
	product "github.com/konstellation-io/kli/api/kre/product"
	version "github.com/konstellation-io/kli/api/kre/version"
	errors "github.com/konstellation-io/kli/internal/krt/errors"
)

// MockRenderer is a mock of Renderer interface.
type MockRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockRendererMockRecorder
}

// MockRendererMockRecorder is the mock recorder for MockRenderer.
type MockRendererMockRecorder struct {
	mock *MockRenderer
}

// NewMockRenderer creates a new mock instance.
func NewMockRenderer(ctrl *gomock.Controller) *MockRenderer {
	mock := &MockRenderer{ctrl: ctrl}
	mock.recorder = &MockRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRenderer) EXPECT() *MockRendererMockRecorder {
	return m.recorder
}

// RenderProducts mocks base method.
func (m *MockRenderer) RenderProducts(products []product.Product) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderProducts", products)
}

// RenderProducts indicates an expected call of RenderProducts.
func (mr *MockRendererMockRecorder) RenderProducts(products interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderProducts", reflect.TypeOf((*MockRenderer)(nil).RenderProducts), products)
}

// RenderServerList mocks base method.
func (m *MockRenderer) RenderServerList(servers []config.ServerConfig, defaultServer string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderServerList", servers, defaultServer)
}

// RenderServerList indicates an expected call of RenderServerList.
func (mr *MockRendererMockRecorder) RenderServerList(servers, defaultServer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderServerList", reflect.TypeOf((*MockRenderer)(nil).RenderServerList), servers, defaultServer)
}

// RenderValidationErrors mocks base method.
func (m *MockRenderer) RenderValidationErrors(validationErrors []*errors.ValidationError) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderValidationErrors", validationErrors)
}

// RenderValidationErrors indicates an expected call of RenderValidationErrors.
func (mr *MockRendererMockRecorder) RenderValidationErrors(validationErrors interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderValidationErrors", reflect.TypeOf((*MockRenderer)(nil).RenderValidationErrors), validationErrors)
}

// RenderVars mocks base method.
func (m *MockRenderer) RenderVars(cfg *version.Config, showValues bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderVars", cfg, showValues)
}

// RenderVars indicates an expected call of RenderVars.
func (mr *MockRendererMockRecorder) RenderVars(cfg, showValues interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderVars", reflect.TypeOf((*MockRenderer)(nil).RenderVars), cfg, showValues)
}

// RenderVersions mocks base method.
func (m *MockRenderer) RenderVersions(versions version.List) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderVersions", versions)
}

// RenderVersions indicates an expected call of RenderVersions.
func (mr *MockRendererMockRecorder) RenderVersions(versions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderVersions", reflect.TypeOf((*MockRenderer)(nil).RenderVersions), versions)
}
