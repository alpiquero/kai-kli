// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	product "github.com/konstellation-io/kli/api/kre/product"
	version "github.com/konstellation-io/kli/api/kre/version"
)

// MockKreInterface is a mock of KreInterface interface.
type MockKreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKreInterfaceMockRecorder
}

// MockKreInterfaceMockRecorder is the mock recorder for MockKreInterface.
type MockKreInterfaceMockRecorder struct {
	mock *MockKreInterface
}

// NewMockKreInterface creates a new mock instance.
func NewMockKreInterface(ctrl *gomock.Controller) *MockKreInterface {
	mock := &MockKreInterface{ctrl: ctrl}
	mock.recorder = &MockKreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKreInterface) EXPECT() *MockKreInterfaceMockRecorder {
	return m.recorder
}

// Product mocks base method.
func (m *MockKreInterface) Product() product.ProductInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Product")
	ret0, _ := ret[0].(product.ProductInterface)
	return ret0
}

// Product indicates an expected call of Product.
func (mr *MockKreInterfaceMockRecorder) Product() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Product", reflect.TypeOf((*MockKreInterface)(nil).Product))
}

// Version mocks base method.
func (m *MockKreInterface) Version() version.VersionInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(version.VersionInterface)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockKreInterfaceMockRecorder) Version() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockKreInterface)(nil).Version))
}
