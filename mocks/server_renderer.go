// Code generated by MockGen. DO NOT EDIT.
// Source: configurator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	server "github.com/konstellation-io/kli/internal/server"
)

// MockServerRenderer is a mock of Renderer interface.
type MockServerRenderer struct {
	ctrl     *gomock.Controller
	recorder *MockServerRendererMockRecorder
}

// MockServerRendererMockRecorder is the mock recorder for MockServerRenderer.
type MockServerRendererMockRecorder struct {
	mock *MockServerRenderer
}

// NewMockServerRenderer creates a new mock instance.
func NewMockServerRenderer(ctrl *gomock.Controller) *MockServerRenderer {
	mock := &MockServerRenderer{ctrl: ctrl}
	mock.recorder = &MockServerRendererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerRenderer) EXPECT() *MockServerRendererMockRecorder {
	return m.recorder
}

// RenderServers mocks base method.
func (m *MockServerRenderer) RenderServers(kaiConfiguration *server.KaiConfiguration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenderServers", kaiConfiguration)
}

// RenderServers indicates an expected call of RenderServers.
func (mr *MockServerRendererMockRecorder) RenderServers(kaiConfiguration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderServers", reflect.TypeOf((*MockServerRenderer)(nil).RenderServers), kaiConfiguration)
}
