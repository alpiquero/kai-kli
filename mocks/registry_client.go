// Code generated by MockGen. DO NOT EDIT.
// Source: registered_process.go

// Package mocks is a generated GoMock package.
package mocks

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	processregistry "github.com/konstellation-io/kli/api/processregistry"
	configuration "github.com/konstellation-io/kli/internal/services/configuration"
)

// MockRegisteredProcessInterface is a mock of RegisteredProcessInterface interface.
type MockRegisteredProcessInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRegisteredProcessInterfaceMockRecorder
}

// MockRegisteredProcessInterfaceMockRecorder is the mock recorder for MockRegisteredProcessInterface.
type MockRegisteredProcessInterfaceMockRecorder struct {
	mock *MockRegisteredProcessInterface
}

// NewMockRegisteredProcessInterface creates a new mock instance.
func NewMockRegisteredProcessInterface(ctrl *gomock.Controller) *MockRegisteredProcessInterface {
	mock := &MockRegisteredProcessInterface{ctrl: ctrl}
	mock.recorder = &MockRegisteredProcessInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisteredProcessInterface) EXPECT() *MockRegisteredProcessInterfaceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockRegisteredProcessInterface) List(server *configuration.Server, productID, processType string) ([]processregistry.RegisteredProcess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", server, productID, processType)
	ret0, _ := ret[0].([]processregistry.RegisteredProcess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegisteredProcessInterfaceMockRecorder) List(server, productID, processType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegisteredProcessInterface)(nil).List), server, productID, processType)
}

// Register mocks base method.
func (m *MockRegisteredProcessInterface) Register(server *configuration.Server, processFile *os.File, productID, processID, processType, version string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", server, processFile, productID, processID, processType, version)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisteredProcessInterfaceMockRecorder) Register(server, processFile, productID, processID, processType, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisteredProcessInterface)(nil).Register), server, processFile, productID, processID, processType, version)
}
